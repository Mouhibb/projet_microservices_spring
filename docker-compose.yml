version: '3.8'

services:
  configserver:
    container_name: configserver
    image: config-server
    build:
      context: ./configServer
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - backend
  discoveryservice:
    container_name: discoveryservice
    image: discovery-service
    build:
      context: ./eureka
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - backend
    environment:
      - HOSTNAME=discoveryservice
      - PROFILE=dev
    depends_on:
      - configserver

  teamservice:
    container_name: teamservice
    image: team-service
    build:
      context: ./microservice-team
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - backend
    environment:
      - MONGO_HOST=mongo
      - HOSTNAME=teamservice
      - PROFILE=dev
    depends_on:
      - discoveryservice
      - mongo
      - gatewayapiservice
      - configserver


  playerservice:
    container_name: playerservice
    image: player-service
    build:
      context: ./microservice-player
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    networks:
      - backend
    environment:
#     - SPRING_PROFILES_ACTIVE=dev
#     - MYSQL_URI=jdbc:mysql://localhost:3306/player?createDatabaseIfNotExist=true
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=
  #   - EUREKA_URI=http://discoveryservice:8761/eureka/
  #   - TEAM_SERVICE_URI=http://teamservice:8081/team
      - HOSTNAME=playerservice
      - PROFILE=dev
  #   - SPRING_CLOUD_CONFIG_URI=http://configserver:8888
    depends_on:
      - discoveryservice
      - gatewayapiservice
      - mysql
      - teamservice
      - configserver


  gatewayapiservice:
    container_name: gatewayapiservice
    image: gateway-api-service
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    networks:
      - backend
    environment:

      - HOSTNAME=gatewayapiservice
      - PROFILE=dev
    depends_on:
      - discoveryservice
      - configserver


  mongo:
    container_name: mongo
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - backend
    volumes:
      - mongo-data:/data/db

  mysql:
    container_name: mysql
    image: mysql:latest
    ports:
      - "3306:3306"
    networks:
      - backend
    environment:
      MYSQL_DATABASE: player
    volumes:
      - mysql-data:/var/lib/mysql

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - backend
    depends_on:
      - zookeeper

  zookeeper:
      image: wurstmeister/zookeeper:latest
      container_name: zookeeper
      ports:
        - "2181:2181"
      networks:
        - backend

networks:
  backend:
    driver: bridge


volumes:
  mongo-data:
  mysql-data:
